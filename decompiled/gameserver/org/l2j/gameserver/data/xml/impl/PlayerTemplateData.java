// 
// Decompiled by Procyon v0.5.36
// 

package org.l2j.gameserver.data.xml.impl;

import org.slf4j.LoggerFactory;
import org.w3c.dom.NamedNodeMap;
import java.util.List;
import org.w3c.dom.Node;
import org.l2j.gameserver.model.Location;
import java.util.ArrayList;
import org.l2j.gameserver.model.StatsSet;
import java.io.File;
import org.w3c.dom.Document;
import org.l2j.commons.configuration.Configurator;
import org.l2j.gameserver.settings.ServerSettings;
import java.nio.file.Path;
import java.util.EnumMap;
import org.l2j.gameserver.model.actor.templates.PlayerTemplate;
import org.l2j.gameserver.model.base.ClassId;
import java.util.Map;
import org.slf4j.Logger;
import org.l2j.gameserver.util.GameXmlReader;

public final class PlayerTemplateData extends GameXmlReader
{
    private static final Logger LOGGER;
    public static final int MAX_LEVEL = 85;
    private final Map<ClassId, PlayerTemplate> _playerTemplates;
    private int _dataCount;
    private int _autoGeneratedCount;
    
    private PlayerTemplateData() {
        this._playerTemplates = new EnumMap<ClassId, PlayerTemplate>(ClassId.class);
        this._dataCount = 0;
        this._autoGeneratedCount = 0;
        this.load();
    }
    
    protected Path getSchemaFilePath() {
        return ((ServerSettings)Configurator.getSettings((Class)ServerSettings.class)).dataPackDirectory().resolve("data/xsd/charTemplate.xsd");
    }
    
    public void load() {
        this._playerTemplates.clear();
        this.parseDatapackDirectory("data/stats/chars/baseStats", false);
        PlayerTemplateData.LOGGER.info("Loaded {} character templates.", (Object)this._playerTemplates.size());
        PlayerTemplateData.LOGGER.info("Loaded {} level up gain records.", (Object)this._dataCount);
        if (this._autoGeneratedCount > 0) {
            PlayerTemplateData.LOGGER.info("Generated {} level up gain records.", (Object)this._autoGeneratedCount);
        }
        this.releaseResources();
    }
    
    public void parseDocument(final Document doc, final File f) {
        int classId = 0;
        for (Node n = doc.getFirstChild(); n != null; n = n.getNextSibling()) {
            if ("list".equalsIgnoreCase(n.getNodeName())) {
                for (Node d = n.getFirstChild(); d != null; d = d.getNextSibling()) {
                    if ("classId".equalsIgnoreCase(d.getNodeName())) {
                        classId = Integer.parseInt(d.getTextContent());
                    }
                    else if ("staticData".equalsIgnoreCase(d.getNodeName())) {
                        final StatsSet set = new StatsSet();
                        set.set("classId", classId);
                        final List<Location> creationPoints = new ArrayList<Location>();
                        for (Node nd = d.getFirstChild(); nd != null; nd = nd.getNextSibling()) {
                            if (!nd.getNodeName().equals("#text")) {
                                if (nd.getChildNodes().getLength() > 1) {
                                    for (Node cnd = nd.getFirstChild(); cnd != null; cnd = cnd.getNextSibling()) {
                                        if (nd.getNodeName().equalsIgnoreCase("collisionMale")) {
                                            if (cnd.getNodeName().equalsIgnoreCase("radius")) {
                                                set.set("collision_radius", cnd.getTextContent());
                                            }
                                            else if (cnd.getNodeName().equalsIgnoreCase("height")) {
                                                set.set("collision_height", cnd.getTextContent());
                                            }
                                        }
                                        if ("node".equalsIgnoreCase(cnd.getNodeName())) {
                                            final NamedNodeMap attrs = cnd.getAttributes();
                                            creationPoints.add(new Location(this.parseInt(attrs, "x"), this.parseInt(attrs, "y"), this.parseInt(attrs, "z")));
                                        }
                                        else if ("walk".equalsIgnoreCase(cnd.getNodeName())) {
                                            set.set("baseWalkSpd", cnd.getTextContent());
                                        }
                                        else if ("run".equalsIgnoreCase(cnd.getNodeName())) {
                                            set.set("baseRunSpd", cnd.getTextContent());
                                        }
                                        else if ("slowSwim".equals(cnd.getNodeName())) {
                                            set.set("baseSwimWalkSpd", cnd.getTextContent());
                                        }
                                        else if ("fastSwim".equals(cnd.getNodeName())) {
                                            set.set("baseSwimRunSpd", cnd.getTextContent());
                                        }
                                        else if (!cnd.getNodeName().equals("#text")) {
                                            set.set(invokedynamic(makeConcatWithConstants:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;, nd.getNodeName(), cnd.getNodeName()), cnd.getTextContent());
                                        }
                                    }
                                }
                                else {
                                    set.set(nd.getNodeName(), nd.getTextContent());
                                }
                            }
                        }
                        set.set("basePDef", set.getInt("basePDefchest", 0) + set.getInt("basePDeflegs", 0) + set.getInt("basePDefhead", 0) + set.getInt("basePDeffeet", 0) + set.getInt("basePDefgloves", 0) + set.getInt("basePDefunderwear", 0) + set.getInt("basePDefcloak", 0));
                        set.set("baseMDef", set.getInt("baseMDefrear", 0) + set.getInt("baseMDeflear", 0) + set.getInt("baseMDefrfinger", 0) + set.getInt("baseMDefrfinger", 0) + set.getInt("baseMDefneck", 0));
                        this._playerTemplates.put(ClassId.getClassId(classId), new PlayerTemplate(set, creationPoints));
                    }
                    else if ("lvlUpgainData".equalsIgnoreCase(d.getNodeName())) {
                        int level = 0;
                        for (Node lvlNode = d.getFirstChild(); lvlNode != null; lvlNode = lvlNode.getNextSibling()) {
                            if ("level".equalsIgnoreCase(lvlNode.getNodeName())) {
                                final NamedNodeMap attrs = lvlNode.getAttributes();
                                level = this.parseInt(attrs, "val");
                                final byte maxLevel = LevelData.getInstance().getMaxLevel();
                                for (Node valNode = lvlNode.getFirstChild(); valNode != null; valNode = valNode.getNextSibling()) {
                                    final String nodeName = valNode.getNodeName();
                                    if (level <= maxLevel && (nodeName.startsWith("hp") || nodeName.startsWith("mp") || nodeName.startsWith("cp")) && this._playerTemplates.containsKey(ClassId.getClassId(classId))) {
                                        this._playerTemplates.get(ClassId.getClassId(classId)).setUpgainValue(nodeName, level, Double.parseDouble(valNode.getTextContent()));
                                        ++this._dataCount;
                                    }
                                }
                            }
                        }
                        while (level < 85) {
                            ++level;
                            ++this._autoGeneratedCount;
                            final double hpM1 = this._playerTemplates.get(ClassId.getClassId(classId)).getBaseHpMax(level - 1);
                            this._playerTemplates.get(ClassId.getClassId(classId)).setUpgainValue("hp", level, (hpM1 * level / (level - 1) + hpM1 * (level + 1) / (level - 1)) / 2.0);
                            final double mpM1 = this._playerTemplates.get(ClassId.getClassId(classId)).getBaseMpMax(level - 1);
                            this._playerTemplates.get(ClassId.getClassId(classId)).setUpgainValue("mp", level, (mpM1 * level / (level - 1) + mpM1 * (level + 1) / (level - 1)) / 2.0);
                            final double cpM1 = this._playerTemplates.get(ClassId.getClassId(classId)).getBaseCpMax(level - 1);
                            this._playerTemplates.get(ClassId.getClassId(classId)).setUpgainValue("cp", level, (cpM1 * level / (level - 1) + cpM1 * (level + 1) / (level - 1)) / 2.0);
                            final double hpRegM1 = this._playerTemplates.get(ClassId.getClassId(classId)).getBaseHpRegen(level - 1);
                            final double hpRegM2 = this._playerTemplates.get(ClassId.getClassId(classId)).getBaseHpRegen(level - 2);
                            this._playerTemplates.get(ClassId.getClassId(classId)).setUpgainValue("hpRegen", level, hpRegM1 * 2.0 - hpRegM2);
                            final double mpRegM1 = this._playerTemplates.get(ClassId.getClassId(classId)).getBaseMpRegen(level - 1);
                            final double mpRegM2 = this._playerTemplates.get(ClassId.getClassId(classId)).getBaseMpRegen(level - 2);
                            this._playerTemplates.get(ClassId.getClassId(classId)).setUpgainValue("mpRegen", level, mpRegM1 * 2.0 - mpRegM2);
                            final double cpRegM1 = this._playerTemplates.get(ClassId.getClassId(classId)).getBaseCpRegen(level - 1);
                            final double cpRegM2 = this._playerTemplates.get(ClassId.getClassId(classId)).getBaseCpRegen(level - 2);
                            this._playerTemplates.get(ClassId.getClassId(classId)).setUpgainValue("cpRegen", level, cpRegM1 * 2.0 - cpRegM2);
                        }
                    }
                }
            }
        }
    }
    
    public PlayerTemplate getTemplate(final ClassId classId) {
        return this._playerTemplates.get(classId);
    }
    
    public PlayerTemplate getTemplate(final int classId) {
        return this._playerTemplates.get(ClassId.getClassId(classId));
    }
    
    public static PlayerTemplateData getInstance() {
        return Singleton.INSTANCE;
    }
    
    static {
        LOGGER = LoggerFactory.getLogger((Class)PlayerTemplateData.class);
    }
    
    private static class Singleton
    {
        private static final PlayerTemplateData INSTANCE;
        
        static {
            INSTANCE = new PlayerTemplateData();
        }
    }
}
